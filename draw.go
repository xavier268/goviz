package main

import (
	"fmt"
	"io"
	"strings"
	"time"
)

type Package struct {
	Name    string
	Local   bool            // non local are for example std libs packages ...
	Imports map[string]bool // set of imports
	Files   map[string]bool // set of file paths
}

// Draw the package graph into the provided file
func DrawPackages(of io.Writer, pps map[string]Package) {

	fmt.Fprintln(of, "// Autogenerated on ", time.Now())

	fmt.Fprintln(of, "digraph packages {")
	defer fmt.Fprintln(of, "\n}")

	fmt.Fprintln(of, "\n// node definitions")
	for _, p := range pps {
		files := []string{p.Name}
		if p.Local && FlagFiles {
			files = append(files, "-------")
			for f := range p.Files {
				files = append(files, f)
			}
		}
		if p.Local {
			fmt.Fprintf(of, "%q [style=filled fillcolor=green label=%q]\n", p.Name, strings.Join(files, "\n"))
		} else {
			if FlagExternal {
				fmt.Fprintf(of, "%q [style=dashed]\n", p.Name)
			}
		}
	}

	fmt.Fprintln(of, "\n// edge definitions")
	for pname, p := range pps {
		for imp := range p.Imports {
			if pps[imp].Local {
				fmt.Fprintf(of, "%q -> %q \n", pname, imp)
			} else {
				if FlagExternal {
					fmt.Fprintf(of, "%q -> %q [style=dashed]\n", pname, imp)
				}
			}
		}
	}

}
